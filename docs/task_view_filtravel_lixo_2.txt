# PLANO DE IMPLEMENTA√á√ÉO: Sistema de Views Filtr√°veis (Abordagem CORRETA)

## üéØ OBJETIVO FINAL
Criar um sistema elegante onde **StandardTaskView** serve como base reutiliz√°vel para todas as views, com filtros externos aplicados dinamicamente.

## üèóÔ∏è ARQUITETURA CORRETA

### **StandardTaskView = Base Universal**
- Header padr√£o (t√≠tulo, estat√≠sticas, bot√µes)
- Layout customiz√°vel OU layout padr√£o (lista simples)
- Footer padr√£o (QuickAddTaskInput)
- Recebe filtro externo + layout customizado opcional

### **Views/Filtros Espec√≠ficos:**
- **TodayView** = arquivo pr√≥prio ‚Üí StandardTaskView + TodayFilter + layout customizado (ExpansibleGroups)
- **"All Tasks"** = fun√ß√£o inline ‚Üí StandardTaskView + AllTasksFilter + layout padr√£o (SEM arquivo pr√≥prio)
- **"Lista X"** = fun√ß√£o inline ‚Üí StandardTaskView + ListFilter("x") + layout padr√£o (SEM arquivo pr√≥prio)

**IMPORTANTE:** Apenas TodayView ter√° arquivo pr√≥prio! Os outros s√£o apenas filtros aplicados √† StandardTaskView.

---

## üìã ETAPAS DE IMPLEMENTA√á√ÉO

### ETAPA 1: CRIAR SISTEMA DE FILTROS B√ÅSICOS
**Objetivo:** Implementar filtros b√°sicos externos (sem composi√ß√£o ainda)

**Arquivos a criar:**
- `lib/features/task_management/filters/task_filter.dart` - Interface base
- `lib/features/task_management/filters/basic_filters.dart` - Filtros b√°sicos

**Tarefas:**
1. **Criar TaskFilter abstrato**
   ```dart
   abstract class TaskFilter {
     String get name;           // Nome para UI (ex: "Todas as Tarefas", "Hoje", "Matem√°tica")
     String get description;    // Descri√ß√£o detalhada para estado vazio
     IconData get icon;         // √çcone representativo
     Color get color;           // Cor do filtro para UI
     
     // M√©todo principal: decide se tarefa passa no filtro
     bool matches(Task task, TaskController controller);
     
     // Para serializa√ß√£o futura (filtros compostos)
     Map<String, dynamic> toJson();
     static TaskFilter fromJson(Map<String, dynamic> json);
   }
   ```

2. **Implementar filtros b√°sicos essenciais**
   ```dart
   // Filtro para mostrar todas as tarefas
   class AllTasksFilter extends TaskFilter {
     @override
     String get name => 'Todas as Tarefas';
     
     @override
     String get description => 'Todas as suas tarefas em um s√≥ lugar';
     
     @override
     IconData get icon => Icons.list_alt;
     
     @override
     Color get color => Colors.blue;
     
     @override
     bool matches(Task task, TaskController controller) => true;
   }
   
   // Filtro para tarefas de hoje + atrasadas (igual TodayView atual)
   class TodayFilter extends TaskFilter {
     @override
     String get name => 'Hoje';
     
     @override
     String get description => 'Tarefas para hoje e atrasadas';
     
     @override
     IconData get icon => Icons.today_outlined;
     
     @override
     Color get color => Colors.orange;
     
     @override
     bool matches(Task task, TaskController controller) {
       return task.isToday || task.isOverdue;
     }
   }
   
   // Filtro para lista espec√≠fica
   class ListFilter extends TaskFilter {
     final String listId;
     final String listName;
     final Color? listColor;
     
     const ListFilter(this.listId, this.listName, [this.listColor]);
     
     @override
     String get name => listName;
     
     @override
     String get description => 'Tarefas da lista $listName';
     
     @override
     IconData get icon => Icons.list;
     
     @override
     Color get color => listColor ?? Colors.purple;
     
     @override
     bool matches(Task task, TaskController controller) {
       return task.listId == listId;
     }
   }
   ```

**Resultado esperado:** Filtros b√°sicos funcionando e test√°veis externamente

---

### ETAPA 2: IMPLEMENTAR STANDARDTASKVIEW
**Objetivo:** Criar a view universal reutiliz√°vel com layout customiz√°vel

**Arquivos a criar:**
- `lib/features/task_management/widgets/tasks/views/standard_task_view.dart` - View universal
- `lib/features/task_management/widgets/tasks/components/task_header.dart` - Header reutiliz√°vel
- `lib/features/task_management/widgets/tasks/components/task_stats.dart` - Estat√≠sticas

**Tarefas:**
1. **Implementar StandardTaskView (BASE UNIVERSAL)**
   ```dart
   class StandardTaskView extends StatelessWidget {
     final TaskController controller;
     final TaskFilter filter;                                    // FILTRO EXTERNO
     final TaskCardStyle cardStyle;                              // Estilo vem de fora
     final Widget Function(List<Task>, TaskController)? customLayout;  // Layout customizado opcional
     final VoidCallback? onToggleSidebar;
     final bool showQuickAdd;
     
     const StandardTaskView({
       Key? key,
       required this.controller,
       required this.filter,                   // OBRIGAT√ìRIO: filtro externo
       required this.cardStyle,                // OBRIGAT√ìRIO: estilo externo
       this.customLayout,                      // OPCIONAL: layout customizado
       this.onToggleSidebar,
       this.showQuickAdd = true,
     }) : super(key: key);
     
     @override
     Widget build(BuildContext context) {
       return Consumer<ThemeProvider>(
         builder: (context, themeProvider, child) {
           // üîç APLICAR FILTRO √ÄS TAREFAS
           final filteredTasks = controller.tasks
             .where((task) => filter.matches(task, controller))
             .toList();
           
           return Container(
             color: themeProvider.getBackgroundColor(
               context,
               listColor: filter.color,
             ),
             child: Column(
               children: [
                 // üìã HEADER PADR√ÉO REUTILIZ√ÅVEL
                 TaskHeader(
                   title: filter.name,        // T√≠tulo vem do filtro
                   tasks: filteredTasks,
                   color: filter.color,       // Cor vem do filtro
                   onToggleSidebar: onToggleSidebar,
                 ),
                 
                 // üé® LAYOUT CUSTOMIZADO OU LAYOUT PADR√ÉO
                 Expanded(
                   child: customLayout != null
                     ? customLayout!(filteredTasks, controller)  // Layout espec√≠fico (TodayView)
                     : _buildStandardList(context, filteredTasks), // Layout padr√£o (AllTasks/Lists)
                 ),
                 
                 // ‚ûï QUICKADD PADR√ÉO (se habilitado)
                 if (showQuickAdd) _buildQuickAddInput(context),
               ],
             ),
           );
         },
       );
     }
     
     // üìÑ LAYOUT PADR√ÉO: lista simples sem agrupamento
     Widget _buildStandardList(BuildContext context, List<Task> tasks) {
       if (tasks.isEmpty) {
         return _buildEmptyState(context);
       }
       
       return ListView.builder(
         padding: EdgeInsets.all(8),
         itemCount: tasks.length,
         itemBuilder: (context, index) => CardFactory.buildCard(
           style: cardStyle,                    // Estilo vem de fora
           task: tasks[index],
           controller: controller,
           isSelected: controller.selectedTaskId == tasks[index].id,
           onTap: () => controller.selectTask(tasks[index].id),
           onEdit: () => _showEditTask(context, tasks[index]),
           onDelete: () => _showDeleteConfirmation(context, tasks[index]),
         ),
       );
     }
     
     Widget _buildEmptyState(BuildContext context) {
       return Center(
         child: Column(
           mainAxisAlignment: MainAxisAlignment.center,
           children: [
             Icon(
               filter.icon,                     // √çcone vem do filtro
               size: 48,
               color: Theme.of(context).colorScheme.primary.withOpacity(0.6),
             ),
             SizedBox(height: 16),
             Text(
               'Nenhuma tarefa encontrada',
               style: Theme.of(context).textTheme.titleMedium,
             ),
             SizedBox(height: 8),
             Text(
               filter.description,             // Descri√ß√£o vem do filtro
               style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                 color: Theme.of(context).colorScheme.onSurface.withOpacity(0.7),
               ),
               textAlign: TextAlign.center,
             ),
           ],
         ),
       );
     }
     
     Widget _buildQuickAddInput(BuildContext context) {
       // Mesmo QuickAddTaskInput atual, mas respeitando o filtro
       // Se √© ListFilter, adiciona na lista espec√≠fica
       // Se √© outro filtro, adiciona sem lista espec√≠fica
       return QuickAddTaskInput(
         controller: controller,
         defaultListId: filter is ListFilter ? (filter as ListFilter).listId : null,
       );
     }
   }
   ```

2. **TaskHeader reutiliz√°vel (mesmo para todas as views)**
   ```dart
   class TaskHeader extends StatelessWidget {
     final String title;
     final List<Task> tasks;
     final Color? color;
     final VoidCallback? onToggleSidebar;
     
     const TaskHeader({
       Key? key,
       required this.title,
       required this.tasks,
       this.color,
       this.onToggleSidebar,
     }) : super(key: key);
     
     @override
     Widget build(BuildContext context) {
       final totalTasks = tasks.length;
       final completedTasks = tasks.where((t) => t.isCompleted).length;
       final pendingTasks = totalTasks - completedTasks;
       
       return Container(
         padding: EdgeInsets.all(16),
         decoration: BoxDecoration(
           color: Theme.of(context).colorScheme.surface,
           border: Border(
             bottom: BorderSide(
               color: Theme.of(context).dividerColor,
               width: 1,
             ),
           ),
         ),
         child: Column(
           crossAxisAlignment: CrossAxisAlignment.start,
           children: [
             // T√≠tulo e bot√µes
             Row(
               children: [
                 if (onToggleSidebar != null)
                   IconButton(
                     icon: Icon(Icons.menu),
                     onPressed: onToggleSidebar,
                   ),
                 Expanded(
                   child: Text(
                     title,
                     style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                       fontWeight: FontWeight.bold,
                       color: color ?? Theme.of(context).colorScheme.onSurface,
                     ),
                   ),
                 ),
                 IconButton(
                   icon: Icon(Icons.search_outlined),
                   onPressed: () {}, // TODO: implementar busca
                 ),
                 IconButton(
                   icon: Icon(Icons.filter_list_outlined),
                   onPressed: () {}, // TODO: implementar seletor de filtros (ETAPA FUTURA)
                 ),
               ],
             ),
             
             SizedBox(height: 12),
             
             // Estat√≠sticas
             TaskStats(
               totalTasks: totalTasks,
               completedTasks: completedTasks,
               pendingTasks: pendingTasks,
               color: color,
             ),
           ],
         ),
       );
     }
   }
   ```

3. **TaskStats (estat√≠sticas padronizadas)**
   ```dart
   class TaskStats extends StatelessWidget {
     final int totalTasks;
     final int completedTasks;
     final int pendingTasks;
     final Color? color;
     
     const TaskStats({
       Key? key,
       required this.totalTasks,
       required this.completedTasks,
       required this.pendingTasks,
       this.color,
     }) : super(key: key);
     
     @override
     Widget build(BuildContext context) {
       return Row(
         children: [
           _buildStatChip(
             context,
             'Total',
             totalTasks.toString(),
             Icons.task_alt,
             color ?? Theme.of(context).colorScheme.primary,
           ),
           SizedBox(width: 8),
           _buildStatChip(
             context,
             'Pendentes',
             pendingTasks.toString(),
             Icons.pending_outlined,
             Colors.orange,
           ),
           SizedBox(width: 8),
           _buildStatChip(
             context,
             'Conclu√≠das',
             completedTasks.toString(),
             Icons.check_circle_outline,
             Colors.green,
           ),
         ],
       );
     }
     
     Widget _buildStatChip(BuildContext context, String label, String value,
         IconData icon, Color color) {
       return Container(
         padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
         decoration: BoxDecoration(
           color: color.withOpacity(0.1),
           borderRadius: BorderRadius.circular(16),
           border: Border.all(color: color.withOpacity(0.3)),
         ),
         child: Row(
           mainAxisSize: MainAxisSize.min,
           children: [
             Icon(icon, size: 16, color: color),
             SizedBox(width: 6),
             Text(value, style: TextStyle(color: color, fontWeight: FontWeight.bold)),
             SizedBox(width: 4),
             Text(label, style: TextStyle(color: color, fontSize: 12)),
           ],
         ),
       );
     }
   }
   ```

**Resultado esperado:** StandardTaskView funcionando como base universal

---

### ETAPA 3: REFATORAR VIEWS EXISTENTES
**Objetivo:** Usar StandardTaskView para todas as situa√ß√µes

**Arquivos a modificar:**
- `lib/features/task_management/widgets/tasks/views/today_view.dart` - Usar StandardTaskView
- `lib/features/task_management/screens/task_management_screen.dart` - Criar fun√ß√µes inline

**Tarefas:**
1. **Refatorar TodayView (√öNICO ARQUIVO DE VIEW)**
   ```dart
   class TodayView extends StatelessWidget {
     final TaskController controller;
     final VoidCallback? onToggleSidebar;

     const TodayView({
       Key? key,
       required this.controller,
       this.onToggleSidebar,
     }) : super(key: key);

     @override
     Widget build(BuildContext context) {
       return Consumer<ThemeProvider>(
         builder: (context, themeProvider, child) {
           return StandardTaskView(
             controller: controller,
             filter: TodayFilter(),                              // Filtro espec√≠fico
             cardStyle: themeProvider.todayViewCardStyle,        // Estilo espec√≠fico
             onToggleSidebar: onToggleSidebar,
             customLayout: _buildTodayGroupedLayout,             // Layout customizado!
           );
         },
       );
     }

     // üé® LAYOUT ESPEC√çFICO COM AGRUPAMENTOS (igual ao atual)
     Widget _buildTodayGroupedLayout(List<Task> tasks, TaskController controller) {
       final context = this.context;
       final screenWidth = MediaQuery.of(context).size.width;
       final isCompactScreen = screenWidth < 400;
       final isMobile = screenWidth < 600;

       // Agrupar tarefas (mesmo c√≥digo atual)
       final todayTasks = tasks.where((t) => t.isToday && !t.isCompleted).toList();
       final overdueTasks = tasks.where((t) => t.isOverdue && !t.isCompleted).toList();
       final completedTasks = tasks.where((t) => t.isCompleted).toList();

       if (todayTasks.isEmpty && overdueTasks.isEmpty) {
         // StandardTaskView j√° cuida do estado vazio, mas pode personalizar aqui
         return null; // Usa o estado vazio padr√£o
       }

       return SingleChildScrollView(
         padding: EdgeInsets.all(8),
         child: Column(
           children: [
             // Grupos expans√≠veis (mesmo c√≥digo atual)
             if (overdueTasks.isNotEmpty)
               ExpansibleGroup(
                 title: 'Atrasado',
                 icon: Icons.warning_outlined,
                 controller: controller,
                 taskType: TaskGroupType.overdue,
                 iconColor: Colors.red.shade600,
               ),

             if (todayTasks.isNotEmpty)
               ExpansibleGroup(
                 title: 'Hoje',
                 icon: Icons.today_outlined,
                 controller: controller,
                 taskType: TaskGroupType.today,
                 iconColor: Theme.of(context).colorScheme.primary,
               ),

             if (completedTasks.isNotEmpty)
               ExpansibleGroup(
                 title: 'Conclu√≠do',
                 icon: Icons.check_circle_outline,
                 controller: controller,
                 taskType: TaskGroupType.completed,
                 iconColor: Colors.green.shade600,
               ),
           ],
         ),
       );
     }
   }
   ```

2. **Criar fun√ß√µes inline para "All Tasks" e "Lista X" (SEM ARQUIVOS PR√ìPRIOS)**
   ```dart
   // üìÑ Em task_management_screen.dart ou arquivo helper

   // üåê FUN√á√ÉO INLINE: "All Tasks" (SEM ARQUIVO PR√ìPRIO!)
   Widget buildAllTasksView(TaskController controller, VoidCallback? onToggleSidebar) {
     return Consumer<ThemeProvider>(
       builder: (context, themeProvider, child) {
         return StandardTaskView(
           controller: controller,
           filter: AllTasksFilter(),                             // Filtro espec√≠fico
           cardStyle: themeProvider.allTasksViewCardStyle,       // Estilo espec√≠fico
           onToggleSidebar: onToggleSidebar,
           // customLayout: null ‚Üí usa layout padr√£o (lista simples)
         );
       },
     );
   }

   // üìù FUN√á√ÉO INLINE: "Lista X" (SEM ARQUIVO PR√ìPRIO!)
   Widget buildListTasksView(
     TaskController controller,
     String listId,
     VoidCallback? onToggleSidebar,
   ) {
     final list = controller.getListById(listId);
     
     return Consumer<ThemeProvider>(
       builder: (context, themeProvider, child) {
         return StandardTaskView(
           controller: controller,
           filter: ListFilter(listId, list?.name ?? 'Lista', list?.color), // Filtro espec√≠fico
           cardStyle: themeProvider.listViewCardStyle,            // Estilo espec√≠fico
           onToggleSidebar: onToggleSidebar,
           // customLayout: null ‚Üí usa layout padr√£o (lista simples)
         );
       },
     );
   }
   ```

3. **Atualizar task_management_screen.dart (L√ìGICA PRINCIPAL)**
   ```dart
   // üéØ L√ìGICA PRINCIPAL SIMPLIFICADA
   Widget _buildMainContent(TaskController controller, LayoutType layoutType) {
     final onToggleSidebar = layoutType == LayoutType.desktop ? _toggleSidebar : null;
     
     // üìÖ TodayView (arquivo pr√≥prio)
     if (controller.showTodayView) {
       return TodayView(
         controller: controller,
         onToggleSidebar: onToggleSidebar,
       );
     }
     
     // üéØ Activities View (mant√©m como est√°)
     if (controller.showActivitiesView) {
       return _buildActivitiesPanel(context, controller);
     }
     
     // üìù Lista espec√≠fica (fun√ß√£o inline)
     if (controller.selectedListId != null) {
       return buildListTasksView(
         controller,
         controller.selectedListId!,
         onToggleSidebar,
       );
     } 
     
     // üåê "All Tasks" (fun√ß√£o inline - PADR√ÉO)
     else {
       return buildAllTasksView(
         controller,
         onToggleSidebar,
       );
     }
   }
   ```

**Resultado esperado:** Todas as views usando StandardTaskView como base, mas apenas TodayView tem arquivo pr√≥prio

---

## üß™ CRIT√âRIOS DE SUCESSO

### Funcionalidades obrigat√≥rias:
- ‚úÖ **TodayView**: Mant√©m agrupamentos (Atrasado/Hoje/Conclu√≠do) + arquivo pr√≥prio
- ‚úÖ **"All Tasks"**: Lista simples via fun√ß√£o inline (SEM arquivo)
- ‚úÖ **"Lista X"**: Lista simples via fun√ß√£o inline (SEM arquivo)
- ‚úÖ **Header**: Consistente em todas as views (t√≠tulo, estat√≠sticas, bot√µes)
- ‚úÖ **CardStyle**: Espec√≠fico por view via ThemeProvider
- ‚úÖ **Layout responsivo**: Mobile/tablet/desktop
- ‚úÖ **QuickAdd**: Padr√£o em todas as views

### Casos de teste:
1. **TodayView**: Verificar agrupamentos funcionando com StandardTaskView
2. **"All Tasks"**: Verificar lista simples com AllTasksFilter
3. **"Lista X"**: Verificar filtro por lista espec√≠fica
4. **Navega√ß√£o**: Alternar entre views sem problemas
5. **Responsividade**: Testar em diferentes tamanhos de tela

### Compatibilidade mantida:
- ‚úÖ Sistema de temas existente
- ‚úÖ Configura√ß√µes de estilo de cards por view
- ‚úÖ CardFactory e componentes existentes  
- ‚úÖ Sistema de navega√ß√£o atual
- ‚úÖ ExpansibleGroup para TodayView

---

## üìù VANTAGENS DA ABORDAGEM CORRETA

### ‚úÖ **C√≥digo Limpo**
- **StandardTaskView**: ~150 linhas (base universal)
- **TodayView**: ~80 linhas (s√≥ layout customizado)
- **"All Tasks"**: ~15 linhas (fun√ß√£o inline)
- **"Lista X"**: ~20 linhas (fun√ß√£o inline)

### ‚úÖ **Arquitetura S√≥lida**
- Views s√£o apenas filtros aplicados √† StandardTaskView
- Apenas TodayView precisa de arquivo pr√≥prio (layout especial)
- Filtros externos = f√°cil testar e reutilizar

### ‚úÖ **Flexibilidade**
- Views simples: filtro + layout padr√£o
- Views complexas: filtro + layout customizado  
- F√°cil adicionar novas views

### ‚úÖ **Consist√™ncia Total**
- Header sempre igual
- Footer sempre igual
- Estat√≠sticas sempre iguais
- S√≥ o layout do meio muda quando necess√°rio

---

## üîÆ ETAPA FUTURA: FILTROS COMPOSTOS

### **Base S√≥lida para Evolu√ß√£o:**
A arquitetura atual j√° est√° preparada para filtros compostos:

```dart
// üöÄ FUTURA EVOLU√á√ÉO: FILTROS DIN√ÇMICOS
StandardTaskView(
  filter: CompositeFilter([
    TodayFilter(),
    ListFilter("math-id", "Matem√°tica"),
    TagFilter("urgente"),
  ]),
  cardStyle: // Resolu√ß√£o inteligente autom√°tica
)
```

### **Componentes Futuros:**
- **CompositeFilter**: Para combinar m√∫ltiplos filtros
- **FilterBuilder**: Para montagem din√¢mica 
- **FilterSelectorSheet**: Interface de sele√ß√£o
- **Resolu√ß√£o autom√°tica**: CardStyle, t√≠tulo, √≠cone baseado nos filtros ativos

### **Vantagens da Base Atual:**
- ‚úÖ **StandardTaskView** j√° recebe qualquer TaskFilter
- ‚úÖ **Interface TaskFilter** j√° est√° preparada
- ‚úÖ **Sistema de cores/√≠cones** j√° est√° estruturado
- ‚úÖ **Layout customizado** j√° funciona condicionalmente

---

## üéØ IMPLEMENTA√á√ÉO RECOMENDADA

**FAZER AGORA (Etapas 1-3):**
1. Criar TaskFilter e filtros b√°sicos
2. Implementar StandardTaskView
3. Refatorar TodayView + criar fun√ß√µes inline

**FAZER DEPOIS (Etapa Futura):**
4. CompositeFilter + FilterBuilder
5. Interface de sele√ß√£o din√¢mica
6. Views avan√ßadas (Week, Project, etc.)

---

**LEMBRETE:** Apenas **TodayView** ter√° arquivo pr√≥prio! Todos os outros s√£o fun√ß√µes inline usando StandardTaskView + filtro espec√≠fico.
