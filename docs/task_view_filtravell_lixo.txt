# PLANO DE IMPLEMENTA√á√ÉO: Sistema de Views Filtr√°veis

## üéØ OBJETIVO FINAL
Implementar um sistema de views filtr√°veis que permite ao usu√°rio aplicar filtros cumulativos em uma √∫nica interface, substituindo as m√∫ltiplas views separadas por uma solu√ß√£o mais elegante e flex√≠vel.

## üìã ETAPAS DE IMPLEMENTA√á√ÉO

### ETAPA 1: CRIAR SISTEMA DE FILTROS BASE
**Objetivo:** Implementar a arquitetura de filtros compostos e reutiliz√°veis

**Arquivos a criar:**
- `lib/features/task_management/filters/task_filter.dart` - Interface base
- `lib/features/task_management/filters/basic_filters.dart` - Filtros b√°sicos
- `lib/features/task_management/filters/composite_filter.dart` - Filtro composto

**Tarefas:**
1. **Criar TaskFilter abstrato**
   ```dart
   abstract class TaskFilter {
     String get name;           // Nome para UI
     String get description;    // Descri√ß√£o detalhada
     IconData get icon;         // √çcone representativo
     Color get color;           // Cor do filtro
     
     bool matches(Task task, TaskController controller);
     String? getGroupKey(Task task) => null;
     
     Map<String, dynamic> toJson();
     static TaskFilter fromJson(Map<String, dynamic> json);
   }
   
   enum FilterOperator { and, or }
   ```

2. **Implementar filtros b√°sicos**
   - `TodayFilter` - Tarefas de hoje
   - `TomorrowFilter` - Tarefas de amanh√£  
   - `WeekFilter` - Tarefas da semana
   - `ListFilter` - Tarefas de uma lista espec√≠fica
   - `PriorityFilter` - Tarefas por prioridade
   - `StatusFilter` - Tarefas por status (pendente/conclu√≠da)
   - `OverdueFilter` - Tarefas atrasadas

3. **Implementar CompositeFilter**
   ```dart
   class CompositeFilter extends TaskFilter {
     final List<TaskFilter> filters;
     final FilterOperator operator;
     
     @override
     bool matches(Task task, TaskController controller) {
       if (filters.isEmpty) return true;
       
       switch (operator) {
         case FilterOperator.and:
           return filters.every((f) => f.matches(task, controller));
         case FilterOperator.or:
           return filters.any((f) => f.matches(task, controller));
       }
     }
   }
   ```

4. **Criar factory para filtros**
   - M√©todo para criar filtros por tipo
   - Serializa√ß√£o/deserializa√ß√£o para persist√™ncia
   - Valida√ß√£o de filtros

**Resultado esperado:** Sistema de filtros funcionando e test√°vel

---

### ETAPA 2: IMPLEMENTAR STANDARDTASKVIEW
**Objetivo:** Criar a view universal que funciona com qualquer combina√ß√£o de filtros

**Arquivos a criar:**
- `lib/features/task_management/widgets/tasks/views/standard_task_view.dart` - View universal
- `lib/features/task_management/widgets/tasks/components/filter_bar.dart` - Barra de filtros ativos
- `lib/features/task_management/widgets/tasks/components/task_stats.dart` - Estat√≠sticas din√¢micas

**Tarefas:**
1. **Implementar StandardTaskView**
   ```dart
   class StandardTaskView extends StatelessWidget {
     final TaskController controller;
     final CompositeFilter filter;
     final TaskCardStyle cardStyle;
     final bool showQuickAdd;
     
     @override
     Widget build(BuildContext context) {
       // Aplicar filtros √†s tarefas
       final filteredTasks = controller.tasks
         .where((task) => filter.matches(task, controller))
         .toList();
       
       // Verificar necessidade de agrupamento
       final needsGrouping = _hasGrouping(filteredTasks);
       
       return Column(
         children: [
           // Estat√≠sticas din√¢micas
           TaskStats(tasks: filteredTasks),
           
           // Lista de tarefas (agrupada ou simples)
           Expanded(
             child: needsGrouping
               ? _buildGroupedList(filteredTasks)
               : _buildSimpleList(filteredTasks),
           ),
           
           // Input de nova tarefa (opcional)
           if (showQuickAdd) QuickAddTaskInput(controller: controller),
         ],
       );
     }
   }
   ```

2. **Implementar FilterBar component**
   ```dart
   class FilterBar extends StatelessWidget {
     final List<TaskFilter> activeFilters;
     final Function(int) onRemoveFilter;
     final VoidCallback onAddFilter;
     
     @override
     Widget build(BuildContext context) {
       return Container(
         height: 50,
         child: ListView.builder(
           scrollDirection: Axis.horizontal,
           itemBuilder: (context, index) => FilterChip(
             label: Text(activeFilters[index].name),
             avatar: Icon(activeFilters[index].icon),
             onDeleted: () => onRemoveFilter(index),
           ),
         ),
       );
     }
   }
   ```

3. **Implementar TaskStats component**
   - Calcular estat√≠sticas baseadas nas tarefas filtradas
   - Layout responsivo com chips informativos
   - Cores din√¢micas baseadas nos dados

4. **Implementar l√≥gica de agrupamento**
   - Detectar se algum filtro ativo requer agrupamento
   - Agrupar tarefas por chave do filtro
   - Usar ExpansibleGroup quando necess√°rio

5. **Integra√ß√£o com CardFactory**
   - Usar o sistema existente de CardFactory
   - Aplicar estilo de card baseado no contexto
   - Manter compatibilidade com sistema de temas

**Resultado esperado:** View universal funcionando com filtros simples e compostos

---

### ETAPA 3: INTEGRAR COM INTERFACE PRINCIPAL
**Objetivo:** Substituir as views atuais pela nova arquitetura e implementar a UI de sele√ß√£o de filtros

**Arquivos a modificar:**
- `lib/features/task_management/screens/task_management_screen.dart` - Tela principal
- `lib/features/task_management/controllers/task_controller.dart` - Adicionar suporte a filtros

**Arquivos a criar:**
- `lib/features/task_management/widgets/filters/filter_selection_sheet.dart` - Modal de sele√ß√£o
- `lib/features/task_management/widgets/filters/filter_option_tile.dart` - Item de filtro
- `lib/features/task_management/screens/filtered_task_screen.dart` - Nova tela principal

**Tarefas:**
1. **Criar FilteredTaskScreen**
   ```dart
   class FilteredTaskScreen extends StatefulWidget {
     final List<TaskFilter>? initialFilters;
     final String? initialListId;
     
     @override
     _FilteredTaskScreenState createState() => _FilteredTaskScreenState();
   }
   
   class _FilteredTaskScreenState extends State<FilteredTaskScreen> {
     List<TaskFilter> _activeFilters = [];
     FilterOperator _operator = FilterOperator.and;
     
     @override
     Widget build(BuildContext context) {
       return Scaffold(
         appBar: AppBar(
           title: Text(_buildDynamicTitle()),
           actions: [
             IconButton(
               icon: Icon(Icons.filter_list),
               onPressed: _showFilterSelection,
             ),
           ],
         ),
         body: Column(
           children: [
             // Barra de filtros ativos
             if (_activeFilters.length > 1)
               FilterBar(
                 activeFilters: _activeFilters,
                 onRemoveFilter: _removeFilter,
                 onAddFilter: _showFilterSelection,
               ),
             
             // View principal com filtros aplicados
             Expanded(
               child: StandardTaskView(
                 controller: taskController,
                 filter: CompositeFilter(_activeFilters, operator: _operator),
                 cardStyle: _determineCardStyle(),
               ),
             ),
           ],
         ),
       );
     }
   }
   ```

2. **Implementar FilterSelectionSheet**
   ```dart
   class FilterSelectionSheet extends StatelessWidget {
     final TaskController controller;
     final List<TaskFilter> currentFilters;
     final Function(TaskFilter) onFilterSelected;
     
     @override
     Widget build(BuildContext context) {
       final availableFilters = _getAvailableFilters();
       
       return Container(
         height: MediaQuery.of(context).size.height * 0.7,
         child: Column(
           children: [
             // Header
             _buildSheetHeader(context),
             
             // Lista de filtros dispon√≠veis
             Expanded(
               child: ListView.builder(
                 itemCount: availableFilters.length,
                 itemBuilder: (context, index) => FilterOptionTile(
                   filter: availableFilters[index],
                   onTap: () => onFilterSelected(availableFilters[index]),
                 ),
               ),
             ),
           ],
         ),
       );
     }
   }
   ```

3. **Atualizar navega√ß√£o no task_management_screen.dart**
   - Substituir l√≥gica atual de views por navega√ß√£o para FilteredTaskScreen
   - Passar filtros iniciais baseados na sele√ß√£o (Today, AllTasks, Lista espec√≠fica)
   - Manter compatibilidade com sistema existente

4. **Atualizar TaskController**
   - Adicionar suporte para aplicar filtros compostos
   - M√©todos para persistir combina√ß√µes de filtros favoritas
   - Cache de resultados filtrados para performance

5. **Implementar persist√™ncia de filtros**
   - Salvar combina√ß√µes frequentes como favoritas
   - Restaurar √∫ltimo estado de filtros
   - SharedPreferences para filtros salvos

6. **Atualizar configura√ß√µes**
   - Integrar com sistema existente de CardStyle por view
   - Mapear tipos de filtro para estilos apropriados
   - Manter configura√ß√µes de tema

7. **Testes de integra√ß√£o**
   - Verificar navega√ß√£o entre sidebar e views filtradas
   - Testar combina√ß√µes de filtros
   - Validar persist√™ncia de estado
   - Confirmar funcionamento em mobile/tablet/desktop

**Resultado esperado:** Sistema completo funcionando com interface intuitiva para filtros cumulativos

---

## üß™ CRIT√âRIOS DE SUCESSO

### Funcionalidades obrigat√≥rias:
- ‚úÖ Usu√°rio pode navegar de uma lista para view filtrada
- ‚úÖ Usu√°rio pode adicionar filtros cumulativos
- ‚úÖ Usu√°rio pode remover filtros espec√≠ficos
- ‚úÖ T√≠tulo da tela muda dinamicamente baseado nos filtros
- ‚úÖ Sistema de cards por view continua funcionando
- ‚úÖ Layout responsivo (mobile/tablet/desktop)
- ‚úÖ Performance adequada com muitas tarefas

### Casos de uso para testar:
1. **Navega√ß√£o b√°sica:** Sidebar ‚Üí Lista ‚Üí View filtrada
2. **Filtro simples:** Lista "Matem√°tica" + Filtro "Hoje"
3. **Filtros m√∫ltiplos:** Lista + Hoje + Prioridade Alta + Status Pendente
4. **Remo√ß√£o de filtros:** Remover filtros espec√≠ficos do meio da cadeia
5. **Persist√™ncia:** Fechar app e reabrir mantendo filtros
6. **Performance:** 1000+ tarefas com m√∫ltiplos filtros

### Compatibilidade:
- ‚úÖ Sistema de temas existente
- ‚úÖ Configura√ß√µes de estilo de cards
- ‚úÖ CardFactory e componentes existentes
- ‚úÖ Sistema de navega√ß√£o atual
- ‚úÖ Responsividade para todos os tamanhos de tela

---

## üìù OBSERVA√á√ïES IMPORTANTES

### Decis√µes de design:
- **TodayView especial:** Manter agrupamento "Hoje/Atrasadas" quando filtro Today estiver ativo
- **Filtros inteligentes:** N√£o mostrar filtros incompat√≠veis (ex: n√£o mostrar "Lista A" se "Lista B" j√° est√° ativa)
- **UX fluida:** Transi√ß√µes suaves entre adi√ß√£o/remo√ß√£o de filtros
- **Performance:** Lazy loading e cache para listas grandes

### Arquivos que podem ser removidos ap√≥s implementa√ß√£o:
- `all_tasks_view.dart` (substitu√≠da por StandardTaskView)
- `task_panel.dart` (funcionalidade migrada)
- Outros arquivos espec√≠ficos de view que ficaram obsoletos

### Backward compatibility:
- Manter TaskPanel temporariamente como deprecated
- Migra√ß√£o gradual das funcionalidades
- Testes extensivos antes de remover c√≥digo antigo

---

**IMPORTANTE:** Implementar uma etapa por vez, testando completamente antes de prosseguir para a pr√≥xima!
