import 'package:flutter/material.dart';
import 'detail_panel_constants.dart';

/// **DetailPanelHelpers** - Fun√ß√µes utilit√°rias para pain√©is
///
/// Cont√©m m√©todos auxiliares para formata√ß√£o, detec√ß√£o de dispositivo,
/// cria√ß√£o de dados e exibi√ß√£o de feedback para os pain√©is de detalhes.
class DetailPanelHelpers {
  /// üì± Detecta se √© mobile ou desktop baseado na largura da tela
  static bool isMobile(BuildContext context) {
    return MediaQuery.of(context).size.width <
        DetailPanelConstants.mobileBreakpoint;
  }

  /// üìä Detecta se √© tablet
  static bool isTablet(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    return width >= DetailPanelConstants.tabletBreakpoint &&
        width < DetailPanelConstants.desktopBreakpoint;
  }

  /// üñ•Ô∏è Detecta se √© desktop
  static bool isDesktop(BuildContext context) {
    return MediaQuery.of(context).size.width >=
        DetailPanelConstants.desktopBreakpoint;
  }

  /// üìÖ Formata data e hora para exibi√ß√£o no formato brasileiro
  static String formatDateTime(DateTime dateTime) {
    final day = dateTime.day.toString().padLeft(2, '0');
    final month = DetailPanelConstants.monthsShort[dateTime.month];
    final year = dateTime.year;
    final hour = dateTime.hour.toString().padLeft(2, '0');
    final minute = dateTime.minute.toString().padLeft(2, '0');

    return '$day/$month/$year √†s $hour:$minute';
  }

  /// üìù Cria mapa de dados para atualiza√ß√£o de entrada
  static Map<String, dynamic> createUpdateData({
    required String content,
    required String mood,
    required bool isFavorite,
  }) {
    return {'content': content.trim(), 'mood': mood, 'isFavorite': isFavorite};
  }

  /// üì¢ Mostra SnackBar padr√£o com estilo consistente
  static void showSnackBar(
    BuildContext context,
    String message, {
    required bool isError,
  }) {
    if (!context.mounted) return;

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: isError ? Colors.red.shade600 : Colors.green.shade600,
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.all(DetailPanelConstants.contentPadding),
        duration: DetailPanelConstants.snackBarDuration,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      ),
    );
  }

  /// üé® Obt√©m cor do fundo baseada no contexto (mobile/desktop)
  static Color getBackgroundColor(BuildContext context) {
    return isMobile(context)
        ? DetailPanelConstants.backgroundColorMobile
        : DetailPanelConstants.backgroundColorDesktop;
  }

  /// üìê Calcula largura do painel baseada no dispositivo
  static double getPanelWidth(BuildContext context) {
    if (isMobile(context)) {
      return MediaQuery.of(context).size.width;
    }

    // Para tablet e desktop, usar largura fixa
    return DetailPanelConstants.desktopPanelWidth;
  }

  /// üîç Valida se o conte√∫do foi modificado
  static bool hasContentChanged(String original, String current) {
    return original.trim() != current.trim();
  }

  /// ‚ö° Cria configura√ß√£o de anima√ß√£o padr√£o
  static AnimationController createAnimationController(
    TickerProvider vsync, {
    Duration? duration,
  }) {
    return AnimationController(
      duration: duration ?? DetailPanelConstants.slideAnimationDuration,
      vsync: vsync,
    );
  }

  /// üé≠ Cria anima√ß√£o de slide padr√£o
  static Animation<Offset> createSlideAnimation(
    AnimationController controller,
  ) {
    return Tween<Offset>(
      begin: const Offset(1.0, 0.0),
      end: Offset.zero,
    ).animate(
      CurvedAnimation(
        parent: controller,
        curve: DetailPanelConstants.slideAnimationCurve,
      ),
    );
  }
}
